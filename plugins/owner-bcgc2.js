const handler = async (m, { conn, text, usedPrefix, command }) => {
  // Verificaci√≥n de permisos en caso de grupos (aunque este comando es solo para el owner)
  let isAdmin = false;
  if (m.isGroup) {
    const groupMetadata = await conn.groupMetadata(m.chat);
    isAdmin = groupMetadata.participants.some(p =>
      p.id === m.sender && (p.admin === 'admin' || p.admin === 'superadmin')
    );
  }

  // El comando bcgc2 es exclusivo del due√±o
  if (/^bcgc2$/i.test(command)) {
    // No se requiere validaci√≥n adicional porque handler.owner = true
  }

  // Obtener mensaje del texto escrito o de mensaje citado
  const pesan = m.quoted?.text || text;
  if (!pesan) throw "‚ö†Ô∏è *Error:* Debes ingresar un mensaje.";

  // Formato premium tipo tarjeta
  const broadcastMessage = `
‚ùñ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùñ
      üì¢ COMUNICADO
‚ùñ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùñ

${pesan}

‚ùñ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùñ
ü§ñ Sung Jin-Woo
`;

  if (/^bcgc2$/i.test(command)) {
    // Se env√≠a el comunicado a todos los grupos
    const groupsData = await conn.groupFetchAllParticipating();
    const groups = Object.values(groupsData).map(group => group.id);

    if (groups.length === 0) {
      return m.reply("‚ö†Ô∏è *No hay grupos disponibles para enviar el mensaje.*");
    }

    // Retardo para evitar flood (500ms entre cada env√≠o)
    const delay = ms => new Promise(res => setTimeout(res, ms));
    let count = 0;

    for (const groupId of groups) {
      try {
        // Se obtienen los participantes para usarlos en "mentions"
        const groupMetadata = await conn.groupMetadata(groupId);
        const participants = groupMetadata.participants.map(user => user.id);

        await conn.sendMessage(groupId, {
          text: broadcastMessage,
          mentions: participants
        });

        count++;
        await delay(500);
      } catch (e) {
        console.error(`‚ùå Error enviando a ${groupId}:`, e);
      }
    }

    m.reply(`‚úÖ *Comunicado enviado a ${count} grupo(s).*`);
  }
};

// Configuraci√≥n del handler
handler.help = ['bcgc2 <mensaje>'];
handler.tags = ['owner', 'group'];
handler.command = /^(bcgc2)$/i;
handler.owner = true; // Solo el due√±o puede usar este comando
handler.admin = false;

export default handler;
